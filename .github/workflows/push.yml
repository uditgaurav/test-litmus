name: push-pipeline
on:
  push:
    branches:
      - master
      - v*
    tags:
      - "*"
jobs:
  backend-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - shell: bash
        run: |
          cd litmus-portal
          make backend-services-checks

  frontend-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - shell: bash
        run: |
          cd litmus-portal
          make frontend-services-checks

  get-envs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - shell: bash
        run: |
          img_tag=""
          array=(`echo ${GITHUB_REF} | sed 's/\//\n/g'`)
          if [ ${array[1]} == "tags" ]
          then
              echo "tag build"
              img_tag=${GITHUB_REF#refs/*/}
          else
              echo "non tag build"
              img_tag="ci"
          fi
          # This is a condition where image tag looks like "pull/<pullrequest-name>" during pull request build
          NEW_IMG_TAG=`echo $img_tag | sed "s/\//-/g"`
          echo $NEW_IMG_TAG
          echo export IMG_TAG=$NEW_IMG_TAG >> env-vars
          echo export GRAPHQL_SERVER_IMAGE="litmusportal-server" >> env-vars
          echo export AUTHENTICATION_SERVER_IMAGE="litmusportal-auth-server" >> env-vars
          echo export FRONTEND_IMAGE="litmusportal-frontend" >> env-vars
          echo export SUBSCRIBER_IMAGE="litmusportal-subscriber" >> env-vars
          echo export EVENT_TRACKER="litmusportal-event-tracker" >> env-vars
      - name: Uploading envs
        uses: actions/upload-artifact@v2
        with:
          name: env_artifact
          path: env-vars

  docker-build-and-push-graphql-server:
    runs-on: ubuntu-latest
    needs:
      - get-envs
      - backend-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Downloading image artficate
        uses: actions/download-artifact@v2
        with:
          name: env_artifact
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push graphql server docker image
        shell: bash
        run: |
          branch=${GITHUB_REF#refs/*/}
          array=(`echo ${GITHUB_REF} | sed 's/\//\n/g'`)
          if [ $branch == "master" ] || [ ${array[1]} == "tags" ] || [[ $branch =~ ^v[0-9]*.[0-9]*.x$ ]]
          then
            source env-vars
            cd litmus-portal && make docker.buildx
            cd graphql-server
            docker buildx build --file build/Dockerfile --progress plane --push --no-cache --platform linux/arm64,linux/amd64 --tag ${{ secrets.REPONAME }}/${GRAPHQL_SERVER_IMAGE}:${IMG_TAG} .
          fi

  docker-build-and-push-authentication-server:
    runs-on: ubuntu-latest
    needs:
      - get-envs
      - backend-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Downloading image artficate
        uses: actions/download-artifact@v2
        with:
          name: env_artifact
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push auth server docker image
        shell: bash
        run: |
          branch=${GITHUB_REF#refs/*/}
          array=(`echo ${GITHUB_REF} | sed 's/\//\n/g'`)
          if [ $branch == "master" ] || [ ${array[1]} == "tags" ] || [[ $branch =~ ^v[0-9]*.[0-9]*.x$ ]]
          then
            source env-vars
            cd litmus-portal && make docker.buildx
            cd authentication
            docker buildx build --file Dockerfile --progress plane --push --no-cache --platform linux/arm64,linux/amd64 --tag ${{ secrets.REPONAME }}/${AUTHENTICATION_SERVER_IMAGE}:${IMG_TAG} .
          fi

  docker-build-and-push-subscriber:
    runs-on: ubuntu-latest
    needs:
      - get-envs
      - backend-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Downloading image artficate
        uses: actions/download-artifact@v2
        with:
          name: env_artifact
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}          
      - name: Push subscriber docker image
        shell: bash
        run: |
          branch=${GITHUB_REF#refs/*/}
          array=(`echo ${GITHUB_REF} | sed 's/\//\n/g'`)
          if [ $branch == "master" ] || [ ${array[1]} == "tags" ] || [[ $branch =~ ^v[0-9]*.[0-9]*.x$ ]]
          then
            source env-vars
            cd litmus-portal && make docker.buildx
            cd cluster-agents/subscriber
            docker buildx build --file build/Dockerfile --progress plane --push --no-cache --platform linux/arm64,linux/amd64 --tag ${{ secrets.REPONAME }}/${SUBSCRIBER_IMAGE}:${IMG_TAG} .            
          fi

  docker-build-and-push-event-tracker:
    runs-on: ubuntu-latest
    needs:
      - get-envs
      - backend-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Downloading image artficate
        uses: actions/download-artifact@v2
        with:
          name: env_artifact
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}    
      - name: Push event tracker docker image
        shell: bash
        run: |
          branch=${GITHUB_REF#refs/*/}
          array=(`echo ${GITHUB_REF} | sed 's/\//\n/g'`)
          if [ $branch == "master" ] || [ ${array[1]} == "tags" ] || [[ $branch =~ ^v[0-9]*.[0-9]*.x$ ]]
          then
            source env-vars
            cd litmus-portal && make docker.buildx
            cd cluster-agents/event-tracker
            docker buildx build --file Dockerfile --progress plane --push --no-cache --platform linux/arm64,linux/amd64 --tag ${{ secrets.REPONAME }}/${EVENT_TRACKER}:${IMG_TAG} .
          fi

  docker-build-and-push-frontend:
    runs-on: ubuntu-latest
    needs:
      - get-envs
      - frontend-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Downloading image artficate
        uses: actions/download-artifact@v2
        with:
          name: env_artifact
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}           
      - name: Push frontend docker image
        shell: bash
        run: |
          branch=${GITHUB_REF#refs/*/}
          array=(`echo ${GITHUB_REF} | sed 's/\//\n/g'`)
          if [ $branch == "master" ] || [ ${array[1]} == "tags" ] || [[ $branch =~ ^v[0-9]*.[0-9]*.x$ ]]
          then
            source env-vars
            cd litmus-portal && make docker.buildx
            cd frontend
            timestamp=`date "+%s"`
            docker buildx build --file Dockerfile --progress plane --push --no-cache --platform linux/arm64,linux/amd64 --tag ${{ secrets.REPONAME }}/${FRONTEND_IMAGE}:${IMG_TAG} --build-arg REACT_APP_KB_CHAOS_VERSION=${IMG_TAG} --build-arg REACT_APP_BUILD_TIME="$timestamp" --build-arg REACT_APP_HUB_BRANCH_NAME="v1.13.x" .
          fi
